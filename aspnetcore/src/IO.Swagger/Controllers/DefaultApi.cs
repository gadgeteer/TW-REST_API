/*
 * ThingWorx Core REST API
 *
 * ThingWorx Core REST API
 *
 * OpenAPI spec version: 0.3.4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="entity">Type of ThingWorx entity to perform operation on</param>
        /// <param name="thingName">Existing Thing</param>
        /// <param name="serviceName">Name of service to execute</param>
        /// <param name="body"></param>
        /// <response code="200">Service successfully executed</response>
        [HttpPost]
        [Route("/{entity}/{thingName}/Services/{serviceName}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("EntityThingNameServicesServiceNamePost")]
        public virtual IActionResult EntityThingNameServicesServiceNamePost([FromRoute][Required]string entity, [FromRoute][Required]string thingName, [FromRoute][Required]string serviceName, [FromBody]Property body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }


        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Create a new Thing or new Thing Template based on an existing Thing Template Create a new Data Shape or new Thing Shape</remarks>
        /// <param name="body">Name of new entity and name of base Thing Template when creating new Things and Thing Templates</param>
        /// <param name="serviceName">Service to be called</param>
        /// <response code="200">Entity successfully created</response>
        /// <response code="404">Specified Thing Template does not exist</response>
        /// <response code="406">Specified name already exists</response>
        [HttpPost]
        [Route("/Resources/EntityServices/Services/{serviceName}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ResourcesEntityServicesServicesServiceNamePost")]
        public virtual IActionResult ResourcesEntityServicesServicesServiceNamePost([FromBody]NewThing body, [FromRoute][Required]string serviceName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 406 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(406);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns all visible Things
        /// </summary>
        /// <response code="200">Successful Response</response>
        [HttpGet]
        [Route("/Things")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ThingsGet")]
        public virtual IActionResult ThingsGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete an existing Thing</remarks>
        /// <param name="thingName">Existing Thing to be deleted</param>
        /// <response code="0">Definition generated from Swagger Inspector</response>
        [HttpDelete]
        [Route("/Things/{thingName}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ThingsThingNameDelete")]
        public virtual IActionResult ThingsThingNameDelete([FromRoute][Required]string thingName)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="thingName">Existing Thing to query</param>
        /// <response code="200">Succesful Response</response>
        [HttpGet]
        [Route("/Things/{thingName}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ThingsThingNameGet")]
        public virtual IActionResult ThingsThingNameGet([FromRoute][Required]string thingName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Return current property value on specified Thing</remarks>
        /// <param name="thingName">Existing Thing to use</param>
        /// <param name="propertyName">Existing Property to use</param>
        /// <response code="200">Property Successfully retrieved</response>
        /// <response code="404">Unknown Thing or Property</response>
        [HttpGet]
        [Route("/Things/{thingName}/Properties/{propertyName}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ThingsThingNamePropertiesPropertyNameGet")]
        public virtual IActionResult ThingsThingNamePropertiesPropertyNameGet([FromRoute][Required]string thingName, [FromRoute][Required]string propertyName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Set property value on specified Thing</remarks>
        /// <param name="body"></param>
        /// <param name="thingName">Existing Thing to use</param>
        /// <param name="propertyName">Existing Property to use</param>
        /// <response code="200">Property Successfully Set</response>
        /// <response code="404">Unknown Thing or Property</response>
        [HttpPut]
        [Route("/Things/{thingName}/Properties/{propertyName}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ThingsThingNamePropertiesPropertyNamePut")]
        public virtual IActionResult ThingsThingNamePropertiesPropertyNamePut([FromBody]PropertyStringValue body, [FromRoute][Required]string thingName, [FromRoute][Required]string propertyName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="thingName">Existing Thing to use</param>
        /// <response code="0">Event successfully added</response>
        [HttpPost]
        [Route("/Things/{thingName}/Services/AddEventDefinition")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ThingsThingNameServicesAddEventDefinitionPost")]
        public virtual IActionResult ThingsThingNameServicesAddEventDefinitionPost([FromBody]NewEvent body, [FromRoute][Required]string thingName)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Restart and Enable Thing after creation or modification</remarks>
        /// <param name="thingName">Existing Thing to be updated</param>
        /// <param name="serviceName">Restart or Enable an existing Thing</param>
        /// <response code="200">Thing state Successfully updated</response>
        /// <response code="401">Not Authorized</response>
        [HttpPost]
        [Route("/Things/{thingName}/Services/{ServiceName}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ThingsThingNameServicesServiceNamePost")]
        public virtual IActionResult ThingsThingNameServicesServiceNamePost([FromRoute][Required]string thingName, [FromRoute][Required]string serviceName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            throw new NotImplementedException();
        }
    }
}
